// #################################### AOI ####################################

// Import AOI shapefile from assets
var AOI = ee.FeatureCollection('projects/your_project_name/assets/your_asset_name'); // THRESHOLD INPUT (specify AOI)

// Visualize AOI centered on the map
Map.addLayer(AOI, {color: 'red'}, 'AOI');
Map.centerObject(AOI, 11); // THRESHOLD INPUT (zoom)


// #################################### SCALING FACTORS ####################################

// Apply optical and thermal scaling factors for Landsat 8 and 9 surface reflectance imagery
// Imagery scaling factors can be found on the Earth Engine Data Catalog

function L89ScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
  return image.addBands(opticalBands, null, true)
              .addBands(thermalBands, null, true);
}

// #################################### VISUALIZATIONS ####################################

var L89_vis = {
  bands: ['SR_B4', 'SR_B3', 'SR_B2'],
  min: 0.0, // THRESHOLD INPUT (min reflectance)
  max: 0.3, // THRESHOLD INPUT (max reflectance)
  gamma: 1.3 // THRESHOLD INPUT (contrast adjustment)
};

// #################################### MASKING ####################################

// ------------------------- QA_Pixel Mask Landsat 8-9 -------------------------

function QAmask(image) {
  var cloudShadowBitMask = (1 << 4);
  var cloudsBitMask = (1 << 3);
  var dcloudBitMask = (1 << 1);
  var cirrusBitMask = (1 << 2);
  var qa = image.select('QA_PIXEL');
  var QAmask1 = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
              .and(qa.bitwiseAnd(cloudsBitMask).eq(0))
              .and(qa.bitwiseAnd(dcloudBitMask).eq(0))
              .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

// Fmask classification values
  var FMASK_CLEAR_GROUND = 0;
  var FMASK_WATER = 2;
  var FMASK_CLOUD_SHADOW = 3;
  var FMASK_SNOW = 4;
  var FMASK_CLOUD = 5;

  var QAmask2 = image.select('QA_PIXEL').bitwiseAnd(parseInt('111111',2)).eq(0);
  var QAmask3 = image.neq(FMASK_CLOUD).and(image.neq(FMASK_CLOUD_SHADOW));
  var RADSATmask = image.select('QA_RADSAT').eq(0);
  
  var combinedQAmask = QAmask1.and(QAmask2).and(QAmask3).and(RADSATmask); //
  
  return image.updateMask(combinedQAmask);
}

// ------------------------- Buffer QA_Pixel Mask Landsat 8-9 -------------------------

function bufferQAmask(image) {
  var QAmaskImg = QAmask(image).mask();
  var distanceFromClouds = QAmaskImg.not().fastDistanceTransform(30);
  var bufferDistance = 50;  // THRESHOLD INPUT (buffer distance)
  var bufferMask = distanceFromClouds.lte(bufferDistance);
  var combinedMask = QAmaskImg.and(bufferMask.not()); 
  return image.updateMask(combinedMask);
}

//----------------------------- Custom Cloud Score Mask ----------------------

// Function that rescales (between 1 and 0) for cloud score
function rescale(imag, exp, thresholds) { 
  return imag.expression(exp, {
      'blue': imag.select('SR_B2'), // Blue band
      'green': imag.select('SR_B3'), // Green band
      'red': imag.select('SR_B4'), // Red band
      'nir': imag.select('SR_B5'), // Near-IR band
      'swir1': imag.select('SR_B6'), // SWIR 1 band
      'swir2': imag.select('SR_B7') // SWIR 2 band
    })
    .subtract(thresholds[0]) // Subtract minimum threshold
    .divide(thresholds[1] - thresholds[0]); // Divide by the range (max - min)
}

// Function to manually compute cloud score
function calcCloudScore(img) { 
  var score = ee.Image(1.0); 
  score = score.min(rescale(img, 'blue', [0.05, 0.3]));  // THRESHOLD INPUT (blue)
  score = score.min(rescale(img, 'red + green + blue', [0.1, 0.8])); // THRESHOLD INPUT (visible)
  score = score.min(rescale(img, 'nir + swir1 + swir1', [0.15, 0.8]));  // THRESHOLD INPUT (Infrared)
  return score;
}

// CLOUD SCORE 
var maxCloudScore = 0.05; // THRESHOLD INPUT

// Apply a shadow mask to the cloud score masking
function CSmask(img) {
  var cloudScore = calcCloudScore(img); // Calculate cloud score 
  var cloudMask = cloudScore.gt(maxCloudScore); // Create a cloud mask where score is greater than threshold

// Set threshold for detecting possible shadow areas 
  var nirDrkThresh = 0.3; // THRESHOLD INPUT
  var darkPixels = img.select('SR_B5').lt(nirDrkThresh).rename('dark_pixels');  // Detect dark pixels
  
  // Calculate shadow azimuth based on solar azimuth angle
  var solarAzimuth = ee.Number(img.get('SUN_AZIMUTH'));
  var shadowAzimuth = ee.Number(90).subtract(solarAzimuth);
  
  var shadProj = cloudMask
    .directionalDistanceTransform(shadowAzimuth, 10)  // Project shadows
    .reproject({crs: img.select(0).projection(), scale: 30})  // Scale is set to Landsat spatial resolution
    .select('distance')
    .mask()
    .rename('cloud_transform');
    
    // Map cloud shadow projection onto dark pixel areas
  var shadows = shadProj.multiply(darkPixels).rename('shadows');
  
  var cloudshadMask = cloudMask.or(shadows);
  
  return img.updateMask(cloudshadMask.not()); // Apply the combined mask to the image
}

// ------------------------- Buffer Cloud Score Mask Landsat 8-9 -------------------------

// Apply a strong buffer and shadow mask to the cloud score masking
function hbufferCSmask(img) {
  var cloudScore = calcCloudScore(img); // Calculate cloud score 
  var cloudMask = cloudScore.gt(maxCloudScore); // Create a cloud mask where score is greater than threshold
  
  var nirDrkThresh = 0.3; // THRESHOLD INPUT
  var darkPixels = img.select('SR_B5').lt(nirDrkThresh).rename('dark_pixels');  // Detect dark pixels
  
  // Calculate shadow azimuth based on solar azimuth angle
  var solarAzimuth = ee.Number(img.get('SUN_AZIMUTH'));
  var shadowAzimuth = ee.Number(90).subtract(solarAzimuth);
  
  var shadProj = cloudMask
    .directionalDistanceTransform(shadowAzimuth, 10)  // Project shadows
    .reproject({crs: img.select(0).projection(), scale: 30})  // Landsat resolution
    .select('distance')
    .mask()
    .rename('cloud_transform');
    
    // Map cloud shadow projection onto dark pixel areas
  var shadows = shadProj.multiply(darkPixels).rename('shadows');
  
  var cloudshadMask = cloudMask.or(shadows);
  
  // Buffer Cloud and shadow Mask
  var distanceFromMask = cloudshadMask.fastDistanceTransform(30); // Get distance from clouds
  var bufferMask = distanceFromMask.lte(50); // THRESHOLD INPUT (high buffer around clouds)
  
  //var shadowMask = img.normalizedDifference(['SR_B5', 'SR_B6']).rename('shadowScore').lt(0.5);
  return img.updateMask(bufferMask.not())//.updateMask(shadowMask);
}

// Apply a low buffer and shadow mask to the advanced cloud masking
function lbufferCSmask(img) {
  var cloudScore = calcCloudScore(img); // Calculate cloud score 
  var cloudMask = cloudScore.gt(maxCloudScore); // Create a cloud mask where score is greater than threshold
  
  var nirDrkThresh = 0.3;
  var darkPixels = img.select('SR_B5').lt(nirDrkThresh).rename('dark_pixels');  // Detect dark pixels
  
  // Calculate shadow azimuth based on solar azimuth angle
  var solarAzimuth = ee.Number(img.get('SUN_AZIMUTH'));
  var shadowAzimuth = ee.Number(90).subtract(solarAzimuth);
  
  var shadProj = cloudMask
    .directionalDistanceTransform(shadowAzimuth, 10)  // Project shadows
    .reproject({crs: img.select(0).projection(), scale: 30})  // Landsat spatial resolution
    .select('distance')
    .mask()
    .rename('cloud_transform');
    
    // Map cloud shadow projection onto dark pixel areas
  var shadows = shadProj.multiply(darkPixels).rename('shadows');
  
  var cloudshadMask = cloudMask.or(shadows);
  
  // Buffer Cloud and shadow Mask
  var distanceFromMask = cloudshadMask.fastDistanceTransform(30); // Get distance from clouds
  var bufferMask = distanceFromMask.lte(10); // THRESHOLD INPUT (low buffer around clouds)
  
  //var shadowMask = img.normalizedDifference(['SR_B5', 'SR_B6']).rename('shadowScore').lt(0.5);
  return img.updateMask(bufferMask.not()); //.updateMask(shadowMask)
}

// #################################### IMAGE COLLECTION & COMPOSITING ####################################

for (var year = 2013; year <= 2024; year++) { // THRESHOLD INPUT (year loop)
  var start = year + '-10-01'; // THRESHOLD INPUT (start month of interest)
  var end = (year + 1) + '-01-31';  // THRESHOLD INPUT (end month of interest)

  var L89 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2') // Landsat 8 Tier 1 Level 2 Surface Reflectance
                .merge(ee.ImageCollection('LANDSAT/LC09/C02/T1_L2')) // Landsat 9 Tier 1 Level 2 Surface Reflectance
                .filterDate(start, end)
                .filterBounds(AOI)
                .filterMetadata('CLOUD_COVER', 'less_than', 50) //THRESHOLD INPUT
                .map(L89ScaleFactors);

  // Compute composites for each year with various levels of masking
  var bufferQACScomp = L89.map(bufferQAmask).map(hbufferCSmask).median().clip(AOI);
  var QACScomp = L89.map(QAmask).map(lbufferCSmask).median().clip(AOI);
  var QAcomp = L89.map(QAmask).median().clip(AOI);
  var bufferQAcomp = L89.map(bufferQAmask).median().clip(AOI);
  var CScomp = L89.map(lbufferCSmask).median().clip(AOI);
  var OGcomp = L89.median().clip(AOI);

 
//   // Add layers to the map for each year for visualization (optional - used to check cloud masking performance)
//  Map.addLayer(OGcomp, L89_vis, 'L89_OG_' + year);
  // Map.addLayer(CScomp, L89_vis, 'L89_CS_' + year);
  // Map.addLayer(QAcomp, L89_vis, 'L89_QA_' + year);
  // Map.addLayer(QACScomp, L89_vis, 'L89_QACS_' + year);
  // Map.addLayer(bufferQACScomp, L89_vis, 'L89_bufferQACS_' + year);

// #################################### IMAGE MOSAICING ####################################

// Create a mosaic by stacking the composites in an ImageCollection and applying the mosaic operation
  var mosaic = ee.ImageCollection([
    CScomp,
    QAcomp,
    QACScomp,
    bufferQACScomp
  ]).mosaic();

// Add the mosaic for the current year to the map
  Map.addLayer(mosaic, L89_vis, 'L89_mosaic_' + year);

// #################################### IMAGE EXPORT ####################################

Export.image.toDrive({
  image: mosaic,
  description: 'L89_mosaic_' + year,  // Name of the file
  scale: 30,  // Set the scale (resolution) in meters (30m for Landsat)
  region: AOI,  // Specify the region to export
  maxPixels: 1e13,  // Increase max pixel count if needed THRESHOLD INPUT
  fileFormat: 'GeoTIFF'
});
  
} // END OF ANNUAL 'FOR' LOOP
